/*
 * Lance Catalog REST Specification
 *
 * **Lance Catalog** is an OpenAPI specification on top of the storage-based Lance format. It provides an integration point for catalog service like Apache Hive MetaStore (HMS), Apache Gravitino, etc. to store and use Lance tables. To integrate, the catalog service implements a **Lance Catalog Adapter**, which is a REST server that converts the Lance catalog requests to native requests against the catalog service. Different tools can integrate with Lance Catalog using the generated OpenAPI clients in various languages, and invoke operations in Lance Catalog to read, write and manage Lance tables in the integrated catalog services. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Field {
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "id")]
    pub id: models::Int,
    #[serde(rename = "parentId", skip_serializing_if = "Option::is_none")]
    pub parent_id: Option<models::Int>,
    /// Logical types, currently support parameterized Arrow Type. PARENT types will always have logical type \"struct\". Logical type \"map\" is represented as a struct with a single child field \"entries\". \"entries\" is a struct with fields \"key\" and \"value\". REPEATED types may have logical types: * \"list\" * \"large_list\" * \"list.struct\" * \"large_list.struct\" The final two are used if the list values are structs, and therefore the field is both implicitly REPEATED and PARENT. LEAF types may have logical types: * \"null\" * \"bool\" * \"int8\" / \"uint8\" * \"int16\" / \"uint16\" * \"int32\" / \"uint32\" * \"int64\" / \"uint64\" * \"halffloat\" / \"float\" / \"double\" * \"string\" / \"large_string\" * \"binary\" / \"large_binary\" * \"date32:day\" * \"date64:ms\" * \"decimal:128:{precision}:{scale}\" / \"decimal:256:{precision}:{scale}\" * \"time:{unit}\" / \"timestamp:{unit}\" / \"duration:{unit}\", where unit is \"s\", \"ms\", \"us\", \"ns\" * \"dict:{value_type}:{index_type}:false\" 
    #[serde(rename = "logicalType")]
    pub logical_type: String,
    #[serde(rename = "nullable", skip_serializing_if = "Option::is_none")]
    pub nullable: Option<bool>,
    /// optional field metadata (e.g. extension type name/parameters)
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<std::collections::HashMap<String, String>>,
}

impl Field {
    pub fn new(r#type: Type, name: String, id: models::Int, logical_type: String) -> Field {
        Field {
            r#type,
            name,
            id,
            parent_id: None,
            logical_type,
            nullable: None,
            metadata: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "PARENT")]
    Parent,
    #[serde(rename = "REPEATED")]
    Repeated,
    #[serde(rename = "LEAF")]
    Leaf,
}

impl Default for Type {
    fn default() -> Type {
        Self::Parent
    }
}

