/*
 * Lance Catalog REST Specification
 *
 * **Lance Catalog** is an OpenAPI specification on top of the storage-based Lance format. It provides an integration point for catalog service like Apache Hive MetaStore (HMS), Apache Gravitino, etc. to store and use Lance tables. To integrate, the catalog service implements a **Lance Catalog Adapter**, which is a REST server that converts the Lance catalog requests to native requests against the catalog service. Different tools can integrate with Lance Catalog using the generated OpenAPI clients in various languages, and invoke operations in Lance Catalog to read, write and manage Lance tables in the integrated catalog services. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateTableRequest {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "mode", skip_serializing_if = "Option::is_none")]
    pub mode: Option<Mode>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    #[serde(rename = "schema")]
    pub schema: Box<models::Schema>,
    #[serde(rename = "writerVersion", skip_serializing_if = "Option::is_none")]
    pub writer_version: Option<Box<models::WriterVersion>>,
    /// optional configurations for the table. Keys with the prefix \"lance.\" are reserved for the Lance library.  Other libraries may wish to similarly prefix their configuration keys appropriately. 
    #[serde(rename = "config", skip_serializing_if = "Option::is_none")]
    pub config: Option<std::collections::HashMap<String, String>>,
}

impl CreateTableRequest {
    pub fn new(name: String, schema: models::Schema) -> CreateTableRequest {
        CreateTableRequest {
            name,
            mode: None,
            r#type: None,
            location: None,
            schema: Box::new(schema),
            writer_version: None,
            config: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Mode {
    #[serde(rename = "CREATE")]
    Create,
    #[serde(rename = "EXIST_OK")]
    ExistOk,
    #[serde(rename = "OVERWRITE")]
    Overwrite,
}

impl Default for Mode {
    fn default() -> Mode {
        Self::Create
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "STORAGE_MANAGED")]
    StorageManaged,
    #[serde(rename = "CATALOG_MANAGED")]
    CatalogManaged,
}

impl Default for Type {
    fn default() -> Type {
        Self::StorageManaged
    }
}

