/*
 * Lance Catalog REST Specification
 *
 * **Lance Catalog** is an OpenAPI specification on top of the storage-based Lance format. It provides an integration point for catalog service like Apache Hive MetaStore (HMS), Apache Gravitino, etc. to store and use Lance tables. To integrate, the catalog service implements a **Lance Catalog Adapter**, which is a REST server that converts the Lance catalog requests to native requests against the catalog service. Different tools can integrate with Lance Catalog using the generated OpenAPI clients in various languages, and invoke operations in Lance Catalog to read, write and manage Lance tables in the integrated catalog services. 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AlterTransactionUnsetProperty {
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "key", skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// the behavior if the property key to unset does not exist
    #[serde(rename = "mode", skip_serializing_if = "Option::is_none")]
    pub mode: Option<Mode>,
}

impl AlterTransactionUnsetProperty {
    pub fn new(r#type: Type) -> AlterTransactionUnsetProperty {
        AlterTransactionUnsetProperty {
            r#type,
            key: None,
            mode: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "UnsetProperty")]
    UnsetProperty,
}

impl Default for Type {
    fn default() -> Type {
        Self::UnsetProperty
    }
}
/// the behavior if the property key to unset does not exist
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Mode {
    #[serde(rename = "SKIP")]
    Skip,
    #[serde(rename = "FAIL")]
    Fail,
}

impl Default for Mode {
    fn default() -> Mode {
        Self::Skip
    }
}

