openapi: 3.1.1
info:
  description: |
    **Lance Catalog** is an OpenAPI specification on top of the storage-based Lance format.
    It provides an integration point for catalog service like Apache Hive MetaStore (HMS), Apache Gravitino, etc.
    to store and use Lance tables. To integrate, the catalog service implements a **Lance Catalog Adapter**,
    which is a REST server that converts the Lance catalog requests to native requests against the catalog service.
    Different tools can integrate with Lance Catalog using the generated OpenAPI clients in various languages,
    and invoke operations in Lance Catalog to read, write and manage Lance tables in the integrated catalog services.
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: Lance Catalog REST Specification
  version: 0.0.1
servers:
- description: Generic server URL with all parts configurable
  url: "{scheme}://{host}:{port}/{basePath}"
  variables:
    scheme:
      default: http
    host:
      default: localhost
    port:
      default: "2333"
    basePath:
      default: ""
- description: Server URL when the port can be inferred from the scheme
  url: "{scheme}://{host}/{basePath}"
  variables:
    scheme:
      default: http
    host:
      default: localhost
    basePath:
      default: ""
security:
- OAuth2: []
- BearerAuth: []
paths:
  /v1/namespaces:
    get:
      operationId: listNamespaces
      responses:
        "200":
          $ref: '#/components/responses/ListNamespacesResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenResponse'
        "406":
          $ref: '#/components/responses/UnsupportedOperationResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: |
        List all namespaces in the catalog.
      tags:
      - Namespace
      x-accepts:
      - application/json
    post:
      operationId: CreateNamespace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNamespaceRequest'
        required: true
      responses:
        "200":
          $ref: '#/components/responses/CreateNamespaceResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenResponse'
        "406":
          $ref: '#/components/responses/UnsupportedOperationResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: |
        Create a new namespace. A catalog can manage one or more namespaces. A namespace is used to manage one or more tables. There are three modes when trying to create a namespace:
          * CREATE: Create the namespace if it does not exist. If a namespace of the same name already exists, the operation fails with 400.
          * EXIST_OK: Create the namespace if it does not exist. If a namespace of the same name already exists, the operation succeeds and the existing namespace is kept.
          * OVERWRITE: Create the namespace if it does not exist. If a namespace of the same name already exists, the existing namespace is dropped and a new namespace with this name with no table is created.
      tags:
      - Namespace
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/namespaces/{ns}:
    get:
      description: Return a detailed information for a given namespace
      operationId: GetNamespace
      parameters:
      - $ref: '#/components/parameters/namespace'
      responses:
        "200":
          $ref: '#/components/responses/GetNamespaceResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenResponse'
        "404":
          $ref: '#/components/responses/NotFoundResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: Get information about a namespace
      tags:
      - Namespace
      x-accepts:
      - application/json
    parameters:
    - $ref: '#/components/parameters/namespace'
components:
  examples:
    ListNamespacesEmptyExample:
      summary: An empty list of namespaces
      value:
        namespaces: []
    ListNamespacesNonEmptyExample:
      summary: A non-empty list of namespaces
      value:
        namespaces:
        - accounting
        - credits
  parameters:
    namespace:
      description: The name of the namespace.
      explode: false
      in: path
      name: ns
      required: true
      schema:
        type: string
      style: simple
  responses:
    CreateNamespaceResponse:
      content:
        application/json:
          example:
            namespace:
            - lance.ns1
            properties:
              created_at: "1452120468"
          schema:
            $ref: '#/components/schemas/CreateNamespaceResponse'
      description: "Represents a successful call to create a namespace. Returns the\
        \ namespace created, as well as any properties that were stored for the namespace,\
        \ including those the server might have added. Implementations are not required\
        \ to support namespace properties."
    ListNamespacesResponse:
      content:
        application/json:
          examples:
            NonEmptyResponse:
              $ref: '#/components/examples/ListNamespacesNonEmptyExample'
            EmptyResponse:
              $ref: '#/components/examples/ListNamespacesEmptyExample'
          schema:
            $ref: '#/components/schemas/ListNamespacesResponse'
      description: A list of namespaces
    GetNamespaceResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetNamespaceResponse'
      description: "Returns a namespace, as well as any properties stored on the namespace\
        \ if namespace properties are supported by the server."
    BadRequestErrorResponse:
      content:
        application/json:
          example:
            type: /errors/bad-request
            title: Malformed request
            status: 400
            detail: ""
            instance: /v1/namespaces
          schema:
            $ref: '#/components/schemas/ErrorModel'
      description: "Indicates a bad request error. It could be caused by an unexpected\
        \ request body format or other forms of request validation failure, such as\
        \ invalid json. Usually serves application/json content, although in some\
        \ cases simple text/plain content might be returned by the server's middleware."
    ForbiddenResponse:
      content:
        application/json:
          example:
            type: /errors/forbidden-request
            title: Not authorized to make this request
            status: 403
            detail: ""
            instance: /v1/namespaces
          schema:
            $ref: '#/components/schemas/ErrorModel'
      description: Forbidden. Authenticated user does not have the necessary permissions.
    NotFoundResponse:
      content:
        application/json:
          example:
            type: /errors/not-found-error
            title: Not found Error
            status: 404
            detail: ""
            instance: "/v1/namespaces/{ns}"
          schema:
            $ref: '#/components/schemas/ErrorModel'
      description: A server-side problem that means can not find the specified resource.
    UnsupportedOperationResponse:
      content:
        application/json:
          example:
            type: /errors/unsupported-operation
            title: The server does not support this operation
            status: 406
            detail: ""
            instance: /v1/namespaces
          schema:
            $ref: '#/components/schemas/ErrorModel'
      description: Not Acceptable / Unsupported Operation. The server does not support
        this operation.
    ServiceUnavailableResponse:
      content:
        application/json:
          example:
            type: /errors/service-unavailable
            title: Slow down
            status: 503
            detail: ""
            instance: /v1/namespaces
          schema:
            $ref: '#/components/schemas/ErrorModel'
      description: The service is not ready to handle the request. The client should
        wait and retry. The service may additionally send a Retry-After header to
        indicate when to retry.
    ServerErrorResponse:
      content:
        application/json:
          example:
            type: /errors/server-error
            title: Internal Server Error
            status: 500
            detail: ""
            instance: /v1/namespaces
          schema:
            $ref: '#/components/schemas/ErrorModel'
      description: A server-side problem that might not be addressable from the client
        side. Used for server 5xx errors without more specific documentation in individual
        routes.
  schemas:
    ErrorModel:
      description: "JSON error model(based on [RFC-7807](https://datatracker.ietf.org/doc/html/rfc7807))\
        \ payload returned in a response with further details on the error"
      example:
        instance: /login/log/abc123
        detail: Authentication failed due to incorrect username or password
        type: /errors/incorrect-user-pass
        title: Incorrect username or password
        status: 404
      properties:
        type:
          description: a URI identifier that categorizes the error
          example: /errors/incorrect-user-pass
          type: string
        title:
          description: "a brief, human-readable message about the error"
          example: Incorrect username or password
          type: string
        status:
          description: "HTTP response code, (if present) it must match the actual\
            \ HTTP code returned by the service"
          example: 404
          maximum: 600
          minimum: 400
          type: integer
        detail:
          description: a human-readable explanation of the error
          example: Authentication failed due to incorrect username or password
          type: string
        instance:
          description: a URI that identifies the specific occurrence of the error
          example: /login/log/abc123
          type: string
      required:
      - type
    CreateNamespaceRequest:
      example:
        mode: CREATE
        name: name
        options:
          key: options
      properties:
        name:
          type: string
        mode:
          enum:
          - CREATE
          - EXIST_OK
          - OVERWRITE
          type: string
        options:
          additionalProperties:
            type: string
      required:
      - mode
      - name
    CreateNamespaceResponse:
      example:
        name: name
        properties:
          created_at: "1452120468"
      properties:
        name:
          type: string
        properties:
          additionalProperties:
            type: string
          default: {}
          description: "Properties stored on the namespace, if supported by the server."
          example:
            created_at: "1452120468"
      required:
      - name
    ListNamespacesResponse:
      example:
        namespaces:
        - accounting
        - accounting
      properties:
        namespaces:
          description: An array of namespace names in the catalog.
          items:
            example: accounting
            type: string
          type: array
          uniqueItems: true
    GetNamespaceResponse:
      example:
        namespace: namespace
        properties:
          owner: Ralph
          created_at: "1452120468"
      properties:
        namespace:
          type: string
        properties:
          additionalProperties:
            type: string
          default: {}
          description: "Properties stored on the namespace, if supported by the server.\
            \ If the server does not support namespace properties, it should return\
            \ null for this field. If namespace properties are supported, but none\
            \ are set, it should return an empty object."
          example:
            owner: Ralph
            created_at: "1452120468"
          nullable: true
      required:
      - namespace

