openapi: 3.1.1
info:
  description: |
    **Lance Catalog Specification** is an open specification on top of the storage-based Lance open table and data format  to standardize access to a collection of Lance tables (a.k.a. Lance datasets). It describes how a catalog service like Apache Hive MetaStore (HMS), Apache Gravitino, Unity Catalog, etc. should store and use Lance tables, as well as how ML/AI tools and analytics compute engines (will together be called _"tools"_ in this document) should integrate with Lance tables.
    A Lance catalog is a centralized repository for discovering, organizing, and managing Lance tables. It can either contain a collection of tables, or a collection of Lance catalogs recursively. It is designed to encapsulates concepts like namespace, metastore, database, schema, etc. that could appear in other similar systems, so that it can better integrate with any system with any type of object hierarchy.
    In an enterprise environment, typically there is a requirement to store tables in a catalog service  such as Apache Hive MetaStore, Apache Gravitino, Unity Catalog, etc.  for more advanced governance features around access control, auditing, lineage tracking, etc. **Lance REST catalog** is an OpenAPI protocol that enables reading, writing and managing Lance tables by connecting those catalog services or building a custom catalog server in a standardized way.
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: Lance REST Catalog Specification
  version: 0.0.1
servers:
- description: Generic server URL with all parts configurable
  url: "{scheme}://{host}:{port}/{basePath}"
  variables:
    scheme:
      default: http
    host:
      default: localhost
    port:
      default: "2333"
    basePath:
      default: ""
- description: Server URL when the port can be inferred from the scheme
  url: "{scheme}://{host}/{basePath}"
  variables:
    scheme:
      default: http
    host:
      default: localhost
    basePath:
      default: ""
security:
- OAuth2: []
- BearerAuth: []
paths:
  /v1/catalogs:
    get:
      operationId: ListCatalogs
      parameters:
      - $ref: '#/components/parameters/pageToken'
      - $ref: '#/components/parameters/pageSize'
      - $ref: '#/components/parameters/parentCatalog'
      - $ref: '#/components/parameters/parentCatalogDelimiter'
      responses:
        "200":
          $ref: '#/components/responses/ListCatalogsResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "406":
          $ref: '#/components/responses/UnsupportedOperationErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: |
        List all direct child catalogs of the root catalog.
      tags:
      - Catalog
      x-accepts:
      - application/json
    parameters:
    - $ref: '#/components/parameters/parentCatalog'
    - $ref: '#/components/parameters/parentCatalogDelimiter'
    post:
      operationId: CreateCatalog
      parameters:
      - $ref: '#/components/parameters/parentCatalog'
      - $ref: '#/components/parameters/parentCatalogDelimiter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCatalogRequest'
        required: true
      responses:
        "200":
          $ref: '#/components/responses/CreateCatalogResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "406":
          $ref: '#/components/responses/UnsupportedOperationErrorResponse'
        "409":
          $ref: '#/components/responses/ConflictErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: |
        Create a new catalog. A catalog can manage either a collection of child catalogs, or a collection of tables. There are three modes when trying to create a catalog to differentiate the behavior when a catalog of the same name already exists:
          * CREATE: the operation fails with 400.
          * EXIST_OK: the operation succeeds and the existing catalog is kept.
          * OVERWRITE: the existing catalog is dropped and a new empty catalog with this name is created.
      tags:
      - Catalog
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/catalogs/{catalog}:
    delete:
      operationId: DropCatalog
      parameters:
      - $ref: '#/components/parameters/catalog'
      - $ref: '#/components/parameters/catalogDelimiter'
      responses:
        "204":
          description: "Success, no content"
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponse'
        "409":
          $ref: '#/components/responses/ConflictErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: Drop a catalog. The catalog must be empty.
      tags:
      - Catalog
      x-accepts:
      - application/json
    get:
      description: Return a detailed information for a given catalog
      operationId: GetCatalog
      parameters:
      - $ref: '#/components/parameters/catalog'
      - $ref: '#/components/parameters/catalogDelimiter'
      responses:
        "200":
          $ref: '#/components/responses/GetCatalogResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: Get information about a catalog
      tags:
      - Catalog
      x-accepts:
      - application/json
    head:
      description: Check if a catalog exists. The response does not contain a body.
      operationId: CatalogExists
      parameters:
      - $ref: '#/components/parameters/catalog'
      - $ref: '#/components/parameters/catalogDelimiter'
      responses:
        "200":
          description: "Success, no content"
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: Check if a catalog exists
      tags:
      - Catalog
      x-accepts:
      - application/json
    parameters:
    - $ref: '#/components/parameters/catalog'
    - $ref: '#/components/parameters/catalogDelimiter'
  /v1/table/register:
    post:
      operationId: RegisterTable
      parameters:
      - $ref: '#/components/parameters/catalog'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterTableRequest'
        required: true
      responses:
        "200":
          $ref: '#/components/responses/GetTableResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "406":
          $ref: '#/components/responses/UnsupportedOperationErrorResponse'
        "409":
          $ref: '#/components/responses/ConflictErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: |
        Register an existing table in the given catalog.
      tags:
      - Table
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/tables/{table}:
    get:
      description: |
        Get a table's detailed information.
      operationId: GetTable
      parameters:
      - $ref: '#/components/parameters/table'
      - $ref: '#/components/parameters/tableDelimiter'
      responses:
        "200":
          $ref: '#/components/responses/GetTableResponse'
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: Get a table from the catalog
      tags:
      - Table
      x-accepts:
      - application/json
    head:
      description: Check if a table exists.
      operationId: TableExists
      parameters:
      - $ref: '#/components/parameters/table'
      - $ref: '#/components/parameters/tableDelimiter'
      responses:
        "200":
          description: "Success, no content"
        "400":
          $ref: '#/components/responses/BadRequestErrorResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        "403":
          $ref: '#/components/responses/ForbiddenErrorResponse'
        "404":
          $ref: '#/components/responses/NotFoundErrorResponse'
        "503":
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        "5XX":
          $ref: '#/components/responses/ServerErrorResponse'
      summary: Check if a table exists
      tags:
      - Table
      x-accepts:
      - application/json
    parameters:
    - $ref: '#/components/parameters/table'
    - $ref: '#/components/parameters/tableDelimiter'
components:
  examples:
    ListCatalogsEmptyExample:
      summary: An empty list of catalogs
      value:
        catalogs: []
    ListCatalogsNonEmptyExample:
      summary: A non-empty list of catalogs
      value:
        catalogs:
        - accounting
        - credits
  parameters:
    catalog:
      description: An identifier of the catalog.
      explode: false
      in: path
      name: catalog
      required: true
      schema:
        $ref: '#/components/schemas/StringIdentifier'
      style: simple
    catalogDelimiter:
      description: The delimiter used by the catalog identifier string
      explode: true
      in: query
      name: catalogDelimiter
      required: false
      schema:
        $ref: '#/components/schemas/Delimiter'
      style: form
    parentCatalog:
      description: An identifier of the parent catalog.
      explode: true
      in: query
      name: parentCatalog
      required: false
      schema:
        $ref: '#/components/schemas/StringIdentifier'
      style: form
    parentCatalogDelimiter:
      description: The delimiter used by the parent catalog identifier
      explode: true
      in: query
      name: parentCatalogDelimiter
      required: false
      schema:
        $ref: '#/components/schemas/Delimiter'
      style: form
    pageToken:
      allowEmptyValue: true
      explode: true
      in: query
      name: pageToken
      required: false
      schema:
        $ref: '#/components/schemas/PageToken'
      style: form
    pageSize:
      description: An inclusive upper bound of the number of results that a client
        will receive.
      explode: true
      in: query
      name: pageSize
      required: false
      schema:
        minimum: 1
        type: integer
      style: form
    table:
      description: An identifier of the table
      explode: false
      in: path
      name: table
      required: true
      schema:
        $ref: '#/components/schemas/StringIdentifier'
      style: simple
    tableDelimiter:
      description: The delimiter used by the table identifier
      explode: true
      in: query
      name: tableDelimiter
      required: false
      schema:
        $ref: '#/components/schemas/Delimiter'
      style: form
  responses:
    CreateCatalogResponse:
      content:
        application/json:
          example:
            name: ns1
            properties:
              created_at: "1452120468"
          schema:
            $ref: '#/components/schemas/CreateCatalogResponse'
      description: "Represents a successful call to create a catalog. Returns the\
        \ catalog created, as well as any properties that were stored for the catalog,\
        \ including those the server might have added. Implementations are not required\
        \ to support catalog properties."
    ListCatalogsResponse:
      content:
        application/json:
          examples:
            NonEmptyResponse:
              $ref: '#/components/examples/ListCatalogsNonEmptyExample'
            EmptyResponse:
              $ref: '#/components/examples/ListCatalogsEmptyExample'
          schema:
            $ref: '#/components/schemas/ListCatalogsResponse'
      description: A list of catalogs
    GetCatalogResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetCatalogResponse'
      description: "Returns a catalog, as well as any properties stored on the catalog\
        \ if catalog properties are supported by the server."
    GetTableResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetTableResponse'
      description: Table properties result when loading a table
    BadRequestErrorResponse:
      content:
        application/json:
          example:
            type: /errors/bad-request
            title: Malformed request
            status: 400
            detail: ""
            instance: /v1/catalogs
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: "Indicates a bad request error. It could be caused by an unexpected\
        \ request body format or other forms of request validation failure, such as\
        \ invalid json. Usually serves application/json content, although in some\
        \ cases simple text/plain content might be returned by the server's middleware."
    UnauthorizedErrorResponse:
      content:
        application/json:
          example:
            type: /errors/unauthorized-request
            title: No valid authentication credentials for the operation
            status: 401
            detail: ""
            instance: /v1/catalogs
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Unauthorized. The request lacks valid authentication credentials
        for the operation.
    ForbiddenErrorResponse:
      content:
        application/json:
          example:
            type: /errors/forbidden-request
            title: Not authorized to make this request
            status: 403
            detail: ""
            instance: /v1/catalogs
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Forbidden. Authenticated user does not have the necessary permissions.
    NotFoundErrorResponse:
      content:
        application/json:
          example:
            type: /errors/not-found-error
            title: Not found Error
            status: 404
            detail: ""
            instance: "/v1/catalogs/{catalog}"
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: A server-side problem that means can not find the specified resource.
    UnsupportedOperationErrorResponse:
      content:
        application/json:
          example:
            type: /errors/unsupported-operation
            title: The server does not support this operation
            status: 406
            detail: ""
            instance: /v1/catalogs
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: Not Acceptable / Unsupported Operation. The server does not support
        this operation.
    ConflictErrorResponse:
      content:
        application/json:
          example:
            type: /errors/conflict
            title: The catalog has been concurrently modified
            status: 409
            detail: ""
            instance: "/v1/catalogs/{catalog}"
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: The request conflicts with the current state of the target resource.
    ServiceUnavailableErrorResponse:
      content:
        application/json:
          example:
            type: /errors/service-unavailable
            title: Slow down
            status: 503
            detail: ""
            instance: /v1/catalogs
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: The service is not ready to handle the request. The client should
        wait and retry. The service may additionally send a Retry-After header to
        indicate when to retry.
    ServerErrorResponse:
      content:
        application/json:
          example:
            type: /errors/server-error
            title: Internal Server Error
            status: 500
            detail: ""
            instance: /v1/catalogs
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: A server-side problem that might not be addressable from the client
        side. Used for server 5xx errors without more specific documentation in individual
        routes.
  schemas:
    ErrorResponse:
      description: "JSON error response model based on [RFC-7807](https://datatracker.ietf.org/doc/html/rfc7807)"
      example:
        instance: /login/log/abc123
        detail: Authentication failed due to incorrect username or password
        type: /errors/incorrect-user-pass
        title: Incorrect username or password
        status: 404
      properties:
        type:
          description: a URI identifier that categorizes the error
          example: /errors/incorrect-user-pass
          type: string
        title:
          description: "a brief, human-readable message about the error"
          example: Incorrect username or password
          type: string
        status:
          description: "HTTP response code, (if present) it must match the actual\
            \ HTTP code returned by the service"
          example: 404
          maximum: 600
          minimum: 400
          type: integer
        detail:
          description: a human-readable explanation of the error
          example: Authentication failed due to incorrect username or password
          type: string
        instance:
          description: a URI that identifies the specific occurrence of the error
          example: /login/log/abc123
          type: string
      required:
      - type
    StringIdentifier:
      description: |
        An identifier string that follows the Lance Catalog Specification
      type: string
    ListIdentifier:
      description: |
        An identifier expressed as a list of object names
      items:
        type: string
      type: array
    Delimiter:
      default: "."
      description: |
        A delimiter used in an identifier.
      type: string
    CreateCatalogRequest:
      example:
        mode: CREATE
        name: name
        options:
          key: options
      properties:
        name:
          type: string
        mode:
          enum:
          - CREATE
          - EXIST_OK
          - OVERWRITE
          type: string
        options:
          additionalProperties:
            type: string
      required:
      - mode
      - name
    CreateCatalogResponse:
      example:
        name: name
        properties:
          created_at: "1452120468"
      properties:
        name:
          type: string
        properties:
          additionalProperties:
            type: string
          default: {}
          description: "Properties stored on the catalog, if supported by the server."
          example:
            created_at: "1452120468"
      required:
      - name
    ListCatalogsResponse:
      example:
        catalogs:
        - accounting
        - accounting
        nextPageToken: nextPageToken
      properties:
        catalogs:
          description: An array of child catalog names in the catalog.
          items:
            example: accounting
            type: string
          type: array
          uniqueItems: true
        nextPageToken:
          description: |-
            An opaque token that allows pagination for list APIs (e.g. ListCatalogs).
            For an initial client request for a list API, if the server cannot return all items in one response, or if there are more items than the `pageSize` specified in the client request, the server must return a `nextPageToken` in the response indicating there are more results available.
            After the initial request, the value of `nextPageToken` from each response must be used by the client as the `pageToken` parameter value for the next request.
            Clients must interpret either `null`, missing value or empty string value of `nextPageToken` from a server response as the end of the listing results.
          type: string
          nullable: true
      required:
      - catalogs
    GetCatalogResponse:
      example:
        catalog: catalog
        properties:
          owner: Ralph
          created_at: "1452120468"
      properties:
        catalog:
          type: string
        properties:
          additionalProperties:
            type: string
          default: {}
          description: "Properties stored on the catalog, if supported by the server.\
            \ If the server does not support catalog properties, it should return\
            \ null for this field. If catalog properties are supported, but none are\
            \ set, it should return an empty object."
          example:
            owner: Ralph
            created_at: "1452120468"
          nullable: true
      required:
      - catalog
    PageToken:
      description: |-
        An opaque token that allows pagination for list APIs (e.g. ListCatalogs).
        For an initial client request for a list API, if the server cannot return all items in one response, or if there are more items than the `pageSize` specified in the client request, the server must return a `nextPageToken` in the response indicating there are more results available.
        After the initial request, the value of `nextPageToken` from each response must be used by the client as the `pageToken` parameter value for the next request.
        Clients must interpret either `null`, missing value or empty string value of `nextPageToken` from a server response as the end of the listing results.
      type: string
      nullable: true
    RegisterTableRequest:
      example:
        catalog:
        - catalog
        - catalog
        name: name
        location: location
      properties:
        name:
          type: string
        catalog:
          description: |
            An identifier expressed as a list of object names
          items:
            type: string
          type: array
        location:
          type: string
      required:
      - catalog
      - location
      - name
    GetTableResponse:
      description: |
        Result used when a table is successfully loaded.
      example:
        catalog:
        - catalog
        - catalog
        name: name
        location: location
        properties:
          key: properties
      properties:
        name:
          type: string
        catalog:
          description: |
            An identifier expressed as a list of object names
          items:
            type: string
          type: array
        location:
          type: string
        properties:
          additionalProperties:
            type: string
      required:
      - catalog
      - location
      - name

