# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
openapi: 3.1.1
info:
  title: Lance REST Namespace Specification
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
  description: >
    **Lance Namespace Specification** is an open specification on top of the storage-based Lance data format 
    to standardize access to a collection of Lance tables (a.k.a. Lance datasets).
    It describes how a metadata service like Apache Hive MetaStore (HMS), Apache Gravitino, Unity Catalog, etc.
    should store and use Lance tables, as well as how ML/AI tools and analytics compute engines
    (will together be called _"tools"_ in this document) should integrate with Lance tables.
    
    A Lance namespace is a centralized repository for discovering, organizing, and managing Lance tables.
    It can either contain a collection of tables, or a collection of Lance namespaces recursively.
    It is designed to encapsulates concepts including namespace, metastore, database, schema, etc.
    that frequently appear in other similar data systems to allow easy integration with any system of any type of object hierarchy.
    
    In an enterprise environment, typically there is a requirement to store tables in a metadata service 
    for more advanced governance features around access control, auditing, lineage tracking, etc.
    **Lance REST Namespace** is an OpenAPI protocol that enables reading, writing and managing Lance tables
    by connecting those metadata services or building a custom metadata server in a standardized way.
servers:
  - url: "{scheme}://{host}:{port}/{basePath}"
    description: Generic server URL with all parts configurable
    variables:
      scheme:
        default: http
      host:
        default: localhost
      port:
        default: "2333"
      basePath:
        default: ""
  - url: "{scheme}://{host}/{basePath}"
    description: Server URL when the port can be inferred from the scheme
    variables:
      scheme:
        default: http
      host:
        default: localhost
      basePath:
        default: ""

security:
  - OAuth2: []
  - BearerAuth: []

paths:
  /CreateNamespace:
    post:
      tags: [ Namespace ]
      summary: Create a new namespace
      operationId: CreateNamespace
      description: >
        Create a new namespace.
        
        A namespace can manage either a collection of child namespaces, or a collection of tables.

        There are three modes when trying to create a namespace,
        to differentiate the behavior when a namespace of the same name already exists:
          * CREATE: the operation fails with 400.
          * EXIST_OK: the operation succeeds and the existing namespace is kept.
          * OVERWRITE: the existing namespace is dropped and a new empty namespace with this name is created.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNamespaceRequest'
      responses:
        200:
          $ref: '#/components/responses/CreateNamespaceResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        406:
          $ref: '#/components/responses/UnsupportedOperationErrorResponse'
        409:
          $ref: '#/components/responses/ConflictErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /ListNamespaces:
    post:
      tags: [ Namespace ]
      summary: List namespaces
      operationId: ListNamespaces
      description: >
        List all child namespace names of the root namespace or a given parent namespace.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListNamespacesRequest'
      responses:
        200:
          $ref: '#/components/responses/ListNamespacesResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        406:
          $ref: '#/components/responses/UnsupportedOperationErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /GetNamespace:
    post:
      tags: [ Namespace ]
      summary: Get information about a namespace
      operationId: GetNamespace
      description: >
        Return the detailed information for a given namespace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetNamespaceRequest'
      responses:
        200:
          $ref: '#/components/responses/GetNamespaceResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /DropNamespace:
    post:
      tags: [ Namespace ]
      summary: Drop a namespace
      operationId: DropNamespace
      description: >
        Drop a namespace. The namespace must be empty.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DropNamespaceRequest'
      responses:
        200:
          $ref: '#/components/responses/DropNamespaceResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        409:
          $ref: '#/components/responses/ConflictErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /NamespaceExists:
    post:
      tags: [ Namespace ]
      summary: Check if a namespace exists
      operationId: NamespaceExists
      description: >
        Check if a namespace exists.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NamespaceExistsRequest'
      responses:
        200:
          $ref: '#/components/responses/NamespaceExistsResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /RegisterTable:
    post:
      tags: [ Table ]
      summary: Register a table to a namespace
      operationId: RegisterTable
      description: >
        Register an existing table at a given storage location to a namespace.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterTableRequest'
      responses:
        200:
          $ref: '#/components/responses/RegisterTableResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        406:
          $ref: '#/components/responses/UnsupportedOperationErrorResponse'
        409:
          $ref: '#/components/responses/ConflictErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /GetTable:
    post:
      tags: [ Table ]
      summary: Get a table from the namespace
      operationId: GetTable
      description: >
        Get a table's detailed information under a specified namespace.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetTableRequest'
      responses:
        200:
          $ref: '#/components/responses/GetTableResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /TableExists:
    post:
      tags: [ Table ]
      summary: Check if a table exists
      operationId: TableExists
      description: >
        Check if a table exists.
        
        This API should behave exactly like the GetTable API, except it does not contain a body.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TableExistsRequest'
      responses:
        200:
          $ref: '#/components/responses/TableExistsResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

components:
  schemas:
    ErrorResponse:
      type: object
      description: JSON error response model based on [RFC-7807](https://datatracker.ietf.org/doc/html/rfc7807)
      required:
        - type
      properties:
        type:
          type: string
          description: a URI identifier that categorizes the error
          example: /errors/incorrect-user-pass
        title:
          type: string
          description: a brief, human-readable message about the error
          example: Incorrect username or password
        status:
          type: integer
          minimum: 400
          maximum: 600
          description: HTTP response code, (if present) it must match the actual HTTP code returned by the service
          example: 404
        detail:
          type: string
          description: a human-readable explanation of the error
          example: Authentication failed due to incorrect username or password
        instance:
          type: string
          description: a URI that identifies the specific occurrence of the error
          example: /login/log/abc123

    CreateNamespaceRequest:
      type: object
      required:
        - name
        - mode
      properties:
        name:
          type: string
        parent:
          type: array
          items:
            type: string
        mode:
          type: string
          enum:
            - CREATE
            - EXIST_OK
            - OVERWRITE
        options:
          type: object
          additionalProperties:
            type: string

    CreateNamespaceResponse:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        parent:
          type: array
          items:
            type: string
        properties:
          type: object
          additionalProperties:
            type: string

    ListNamespacesRequest:
      type: object
      properties:
        parent:
          type: array
          items:
            type: string
        pageToken:
          $ref: "#/components/schemas/PageToken"
        pageSize:
          $ref: "#/components/schemas/PageSize"

    ListNamespacesResponse:
      type: object
      required:
        - namespaces
      properties:
        namespaces:
          type: array
          uniqueItems: true
          items:
            type: string
            example: "accounting"
        nextPageToken:
          $ref: "#/components/schemas/PageToken"

    GetNamespaceRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        parent:
          type: array
          items:
            type: string

    GetNamespaceResponse:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        parent:
          type: array
          items:
            type: string
        properties:
          type: object
          description:
            Properties stored on the namespace, if supported by the server.
            If the server does not support namespace properties, it should return null for this field.
            If namespace properties are supported, but none are set, it should return an empty object.
          additionalProperties:
            type: string
          example: { "owner": "Ralph", 'created_at': '1452120468' }
          default: { }
          nullable: true

    DropNamespaceRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        parent:
          type: array
          items:
            type: string

    DropNamespaceResponse:
      type: object
      properties:
        name:
          type: string
        parent:
          type: array
          items:
            type: string
        properties:
          type: object
          additionalProperties:
            type: string

    NamespaceExistsRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        parent:
          type: array
          items:
            type: string

    NamespaceExistsResponse:
      type: object
      required:
        - exists
      properties:
        exists:
          type: boolean

    PageToken:
      description:
        An opaque token that allows pagination for list APIs (e.g. ListNamespaces).
        
        For an initial client request for a list API, if the server cannot return all items in one response,
        or if there are more items than the `pageSize` specified in the client request,
        the server must return a `nextPageToken` in the response indicating there are more results available.
        
        After the initial request, the value of `nextPageToken` from each response must be used by the client
        as the `pageToken` parameter value for the next request.
        
        Clients must interpret either `null`, missing value or empty string value of `nextPageToken` from
        a server response as the end of the listing results.
      type: string
      nullable: true

    PageSize:
      description: An inclusive upper bound of the number of results that a client will receive.
      type: integer
      nullable: true

    RegisterTableRequest:
      type: object
      required:
        - name
        - namespace
        - location
      properties:
        name:
          type: string
        namespace:
          type: array
          items:
            type: string
        location:
          type: string

    RegisterTableResponse:
      type: object
      required:
        - name
        - namespace
        - location
      properties:
        name:
          type: string
        namespace:
          type: array
          items:
            type: string
        location:
          type: string
        properties:
          type: object
          additionalProperties:
            type: string

    GetTableRequest:
      type: object
      required:
        - name
        - namespace
      properties:
        name:
          type: string
        namespace:
          type: array
          items:
            type: string

    GetTableResponse:
      type: object
      required:
        - name
        - namespace
        - location
      properties:
        name:
          type: string
        namespace:
          type: array
          items:
            type: string
        location:
          type: string
        properties:
          type: object
          additionalProperties:
            type: string

    TableExistsRequest:
      type: object
      required:
        - name
        - namespace
      properties:
        name:
          type: string
        namespace:
          type: array
          items:
            type: string

    TableExistsResponse:
      type: object
      required:
        - exists
      properties:
        exists:
          type: boolean

  responses:
    ListNamespacesResponse:
      description: A list of namespaces
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListNamespacesResponse'
          examples:
            NonEmptyResponse:
              $ref: '#/components/examples/ListNamespacesNonEmptyExample'
            EmptyResponse:
              $ref: '#/components/examples/ListNamespacesEmptyExample'

    GetNamespaceResponse:
      description:
        Returns a namespace, as well as any properties stored on the namespace if namespace properties
        are supported by the server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetNamespaceResponse'

    CreateNamespaceResponse:
      description:
        Result of creating a namespace
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateNamespaceResponse'

    DropNamespaceResponse:
      description:
        Result of dropping a namespace
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DropNamespaceResponse'

    NamespaceExistsResponse:
      description:
        Result of checking if a namespace exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NamespaceExistsResponse'

    GetTableResponse:
      description: Table properties result when loading a table
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetTableResponse'

    RegisterTableResponse:
      description: Table properties result when registering a table
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegisterTableResponse'

    TableExistsResponse:
      description:
        Result of checking if a table exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TableExistsResponse'

    # Error Responses

    BadRequestErrorResponse:
      description:
        Indicates a bad request error. It could be caused by an unexpected request
        body format or other forms of request validation failure, such as invalid json.
        Usually serves application/json content, although in some cases simple text/plain content might
        be returned by the server's middleware.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example: {
            "type": "/errors/bad-request",
            "title": "Malformed request",
            "status": 400,
            "detail": "",
            "instance": "/v1/namespaces"
          }

    UnauthorizedErrorResponse:
      description: Unauthorized. The request lacks valid authentication credentials for the operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example: {
            "type": "/errors/unauthorized-request",
            "title": "No valid authentication credentials for the operation",
            "status": 401,
            "detail": "",
            "instance": "/v1/namespaces"
          }

    ForbiddenErrorResponse:
      description: Forbidden. Authenticated user does not have the necessary permissions.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example: {
            "type": "/errors/forbidden-request",
            "title": "Not authorized to make this request",
            "status": 403,
            "detail": "",
            "instance": "/v1/namespaces"
          }

    NotFoundErrorResponse:
      description:
        A server-side problem that means can not find the specified resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example: {
            "type": "/errors/not-found-error",
            "title": "Not found Error",
            "status": 404,
            "detail": "",
            "instance": "/v1/namespaces/{ns}"
          }

    UnsupportedOperationErrorResponse:
      description: Not Acceptable / Unsupported Operation. The server does not support this operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example: {
            "type": "/errors/unsupported-operation",
            "title": "The server does not support this operation",
            "status": 406,
            "detail": "",
            "instance": "/v1/namespaces"
          }

    ConflictErrorResponse:
      description: The request conflicts with the current state of the target resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example: {
            "type": "/errors/conflict",
            "title": "The namespace has been concurrently modified",
            "status": 409,
            "detail": "",
            "instance": "/v1/namespaces/{ns}"
          }

    ServiceUnavailableErrorResponse:
      description:
        The service is not ready to handle the request. The client should wait and retry.
        The service may additionally send a Retry-After header to indicate when to retry.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example: {
            "type": "/errors/service-unavailable",
            "title": "Slow down",
            "status": 503,
            "detail": "",
            "instance": "/v1/namespaces"
          }

    ServerErrorResponse:
      description:
        A server-side problem that might not be addressable from the client
        side. Used for server 5xx errors without more specific documentation in
        individual routes.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example: {
            "type": "/errors/server-error",
            "title": "Internal Server Error",
            "status": 500,
            "detail": "",
            "instance": "/v1/namespaces"
          }

  examples:
    ListNamespacesEmptyExample:
      summary: An empty list of namespaces
      value: {
        "namespaces": [ ]
      }

    ListNamespacesNonEmptyExample:
      summary: A non-empty list of namespaces
      value: {
        "namespaces": [
          "accounting",
          "credits"
        ]
      }
