# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
openapi: 3.1.1
info:
  title: Lance REST Catalog Specification
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
  description: >
    **Lance Catalog Specification** is an open specification on top of the storage-based Lance open table and data format 
    to standardize access to a collection of Lance tables (a.k.a. Lance datasets).
    It describes how a catalog service like Apache Hive MetaStore (HMS), Apache Gravitino, Unity Catalog, etc.
    should store and use Lance tables, as well as how ML/AI tools and analytics compute engines
    (will together be called _"tools"_ in this document) should integrate with Lance tables.
    
    A Lance catalog is a centralized repository for discovering, organizing, and managing Lance tables.
    It can either contain a collection of tables, or a collection of Lance catalogs recursively.
    It is designed to encapsulates concepts like namespace, metastore, database, schema, etc.
    that could appear in other similar systems,
    so that it can better integrate with any system with any type of object hierarchy.
    
    In an enterprise environment, typically there is a requirement to store tables in a catalog service 
    such as Apache Hive MetaStore, Apache Gravitino, Unity Catalog, etc. 
    for more advanced governance features around access control, auditing, lineage tracking, etc.
    **Lance REST catalog** is an OpenAPI protocol that enables reading, writing and managing Lance tables
    by connecting those catalog services or building a custom catalog server in a standardized way.
servers:
  - url: "{scheme}://{host}:{port}/{basePath}"
    description: Generic server URL with all parts configurable
    variables:
      scheme:
        default: http
      host:
        default: localhost
      port:
        default: "2333"
      basePath:
        default: ""
  - url: "{scheme}://{host}/{basePath}"
    description: Server URL when the port can be inferred from the scheme
    variables:
      scheme:
        default: http
      host:
        default: localhost
      basePath:
        default: ""

security:
  - OAuth2: []
  - BearerAuth: []

paths:
  /v1/catalogs:
    parameters:
      - $ref: '#/components/parameters/parentCatalog'
      - $ref: '#/components/parameters/parentCatalogDelimiter'

    post:
      tags: [ Catalog ]
      summary: >
        Create a new catalog. A catalog can manage either a collection of child catalogs, or a collection of tables.
        There are three modes when trying to create a catalog to differentiate the behavior when a catalog of the same name already exists:
          * CREATE: the operation fails with 400.
          * EXIST_OK: the operation succeeds and the existing catalog is kept.
          * OVERWRITE: the existing catalog is dropped and a new empty catalog with this name is created.
      operationId: CreateCatalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCatalogRequest'
      responses:
        200:
          $ref: '#/components/responses/CreateCatalogResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        406:
          $ref: '#/components/responses/UnsupportedOperationErrorResponse'
        409:
          $ref: '#/components/responses/ConflictErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

    get:
      tags: [ Catalog ]
      summary: >
        List all direct child catalogs of the root catalog.
      operationId: ListCatalogs
      parameters:
        - $ref: '#/components/parameters/pageToken'
        - $ref: '#/components/parameters/pageSize'
      responses:
        200:
          $ref: '#/components/responses/ListCatalogsResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        406:
          $ref: '#/components/responses/UnsupportedOperationErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /v1/catalogs/{catalog}:
    parameters:
      - $ref: '#/components/parameters/catalog'
      - $ref: '#/components/parameters/catalogDelimiter'

    get:
      tags: [ Catalog ]
      summary: Get information about a catalog
      operationId: GetCatalog
      description: Return a detailed information for a given catalog
      responses:
        200:
          $ref: '#/components/responses/GetCatalogResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

    delete:
      tags: [ Catalog ]
      summary: Drop a catalog. The catalog must be empty.
      operationId: DropCatalog
      responses:
        204:
          description: Success, no content
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        409:
          $ref: '#/components/responses/ConflictErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

    head:
      tags: [ Catalog ]
      summary: Check if a catalog exists
      operationId: CatalogExists
      description:
        Check if a catalog exists. The response does not contain a body.
      responses:
        200:
          description: Success, no content
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /v1/table/register:
    post:
      tags: [ Table ]
      summary: >
        Register an existing table in the given catalog.
      operationId: RegisterTable
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterTableRequest'
      responses:
        200:
          $ref: '#/components/responses/GetTableResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        406:
          $ref: '#/components/responses/UnsupportedOperationErrorResponse'
        409:
          $ref: '#/components/responses/ConflictErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /v1/tables/{table}:
    parameters:
      - $ref: '#/components/parameters/table'
      - $ref: '#/components/parameters/tableDelimiter'

    get:
      tags: [ Table ]
      summary: Get a table from the catalog
      operationId: GetTable
      description: >
        Get a table's detailed information.
      responses:
        200:
          $ref: '#/components/responses/GetTableResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

    head:
      tags: [ Table ]
      summary: Check if a table exists
      operationId: TableExists
      description:
        Check if a table exists.
      responses:
        200:
          description: Success, no content
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        403:
          $ref: '#/components/responses/ForbiddenErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

components:
  parameters:
    catalog:
      name: catalog
      in: path
      required: true
      description:
        An identifier of the catalog.
      schema:
        $ref: '#/components/schemas/StringIdentifier'

    catalogDelimiter:
      name: catalogDelimiter
      in: query
      description:
        The delimiter used by the catalog identifier string
      schema:
        $ref: '#/components/schemas/Delimiter'

    parentCatalog:
      name: parentCatalog
      in: query
      description:
        An identifier of the parent catalog.
      schema:
        $ref: '#/components/schemas/StringIdentifier'

    parentCatalogDelimiter:
      name: parentCatalogDelimiter
      in: query
      description:
        The delimiter used by the parent catalog identifier
      schema:
        $ref: '#/components/schemas/Delimiter'

    pageToken:
      name: pageToken
      in: query
      required: false
      allowEmptyValue: true
      schema:
        $ref: '#/components/schemas/PageToken'

    pageSize:
      name: pageSize
      in: query
      description:
        An inclusive upper bound of the number of results that a client will receive.
      required: false
      schema:
        type: integer
        minimum: 1

    table:
      name: table
      in: path
      description:
        An identifier of the table
      required: true
      schema:
        $ref: '#/components/schemas/StringIdentifier'

    tableDelimiter:
      name: tableDelimiter
      in: query
      description:
        The delimiter used by the table identifier
      schema:
        $ref: '#/components/schemas/Delimiter'

  schemas:
    ErrorResponse:
      type: object
      description: JSON error response model based on [RFC-7807](https://datatracker.ietf.org/doc/html/rfc7807)
      required:
        - type
      properties:
        type:
          type: string
          description: a URI identifier that categorizes the error
          example: /errors/incorrect-user-pass
        title:
          type: string
          description: a brief, human-readable message about the error
          example: Incorrect username or password
        status:
          type: integer
          minimum: 400
          maximum: 600
          description: HTTP response code, (if present) it must match the actual HTTP code returned by the service
          example: 404
        detail:
          type: string
          description: a human-readable explanation of the error
          example: Authentication failed due to incorrect username or password
        instance:
          type: string
          description: a URI that identifies the specific occurrence of the error
          example: /login/log/abc123

    StringIdentifier:
      type: string
      description: >
        An identifier string that follows the Lance Catalog Specification

    ListIdentifier:
      type: array
      description: >
        An identifier expressed as a list of object names
      items:
        type: string

    Delimiter:
      type: string
      description: >
        A delimiter used in an identifier.
      default: '.'

    CreateCatalogRequest:
      type: object
      required: [ name, mode ]
      properties:
        name: { type: string }
        mode:
          type: string
          enum: [ CREATE, EXIST_OK, OVERWRITE ]
        options:
          type: object
          additionalProperties: { type: string }

    CreateCatalogResponse:
      type: object
      required:
        - name
      properties:
        name: { type: string }
        properties:
          type: object
          additionalProperties:
            type: string
          description:
            Properties stored on the catalog, if supported by the server.
          example: { "created_at": "1452120468" }
          default: { }

    ListCatalogsResponse:
      type: object
      required:
        - catalogs
      properties:
        catalogs:
          description: An array of child catalog names in the catalog.
          type: array
          uniqueItems: true
          items:
            type: string
            example: "accounting"
        nextPageToken:
          $ref: "#/components/schemas/PageToken"

    GetCatalogResponse:
      type: object
      required:
        - catalog
      properties:
        catalog:
          type: string
        properties:
          type: object
          description:
            Properties stored on the catalog, if supported by the server.
            If the server does not support catalog properties, it should return null for this field.
            If catalog properties are supported, but none are set, it should return an empty object.
          additionalProperties:
            type: string
          example: { "owner": "Ralph", 'created_at': '1452120468' }
          default: { }
          nullable: true

    PageToken:
      description:
        An opaque token that allows pagination for list APIs (e.g. ListCatalogs).
        
        For an initial client request for a list API, if the server cannot return all items in one response,
        or if there are more items than the `pageSize` specified in the client request,
        the server must return a `nextPageToken` in the response indicating there are more results available.
        
        After the initial request, the value of `nextPageToken` from each response must be used by the client 
        as the `pageToken` parameter value for the next request.
        
        Clients must interpret either `null`, missing value or empty string value of `nextPageToken` from 
        a server response as the end of the listing results.
      type: string
      nullable: true

    RegisterTableRequest:
      type: object
      required:
        - name
        - catalog
        - location
      properties:
        name:
          type: string
        catalog:
          $ref: '#/components/schemas/ListIdentifier'
        location:
          type: string

    GetTableResponse:
      description: |
        Result used when a table is successfully loaded.
      type: object
      required:
        - name
        - catalog
        - location
      properties:
        name:
          type: string
        catalog:
          $ref: '#/components/schemas/ListIdentifier'
        location:
          type: string
        properties:
          type: object
          additionalProperties:
            type: string

  responses:
    CreateCatalogResponse:
      description:
        Represents a successful call to create a catalog.
        Returns the catalog created, as well as any properties that were stored for the catalog,
        including those the server might have added. Implementations are not required to support catalog
        properties.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateCatalogResponse'
          example: {
            "name": "ns1",
            "properties": { "created_at": "1452120468" }
          }

    ListCatalogsResponse:
      description: A list of catalogs
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListCatalogsResponse'
          examples:
            NonEmptyResponse:
              $ref: '#/components/examples/ListCatalogsNonEmptyExample'
            EmptyResponse:
              $ref: '#/components/examples/ListCatalogsEmptyExample'

    GetCatalogResponse:
      description:
        Returns a catalog, as well as any properties stored on the catalog if catalog properties
        are supported by the server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetCatalogResponse'

    GetTableResponse:
      description: Table properties result when loading a table
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetTableResponse'

    # Error Responses

    BadRequestErrorResponse:
      description:
        Indicates a bad request error. It could be caused by an unexpected request
        body format or other forms of request validation failure, such as invalid json.
        Usually serves application/json content, although in some cases simple text/plain content might
        be returned by the server's middleware.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example: {
            "type": "/errors/bad-request",
            "title": "Malformed request",
            "status": 400,
            "detail": "",
            "instance": "/v1/catalogs"
          }

    UnauthorizedErrorResponse:
      description: Unauthorized. The request lacks valid authentication credentials for the operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example: {
            "type": "/errors/unauthorized-request",
            "title": "No valid authentication credentials for the operation",
            "status": 401,
            "detail": "",
            "instance": "/v1/catalogs"
          }

    ForbiddenErrorResponse:
      description: Forbidden. Authenticated user does not have the necessary permissions.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example: {
            "type": "/errors/forbidden-request",
            "title": "Not authorized to make this request",
            "status": 403,
            "detail": "",
            "instance": "/v1/catalogs"
          }

    NotFoundErrorResponse:
      description:
        A server-side problem that means can not find the specified resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example: {
            "type": "/errors/not-found-error",
            "title": "Not found Error",
            "status": 404,
            "detail": "",
            "instance": "/v1/catalogs/{catalog}"
          }

    UnsupportedOperationErrorResponse:
      description: Not Acceptable / Unsupported Operation. The server does not support this operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example: {
            "type": "/errors/unsupported-operation",
            "title": "The server does not support this operation",
            "status": 406,
            "detail": "",
            "instance": "/v1/catalogs"
          }

    ConflictErrorResponse:
      description: The request conflicts with the current state of the target resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example: {
            "type": "/errors/conflict",
            "title": "The catalog has been concurrently modified",
            "status": 409,
            "detail": "",
            "instance": "/v1/catalogs/{catalog}"
          }

    ServiceUnavailableErrorResponse:
      description:
        The service is not ready to handle the request. The client should wait and retry.
        The service may additionally send a Retry-After header to indicate when to retry.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example: {
            "type": "/errors/service-unavailable",
            "title": "Slow down",
            "status": 503,
            "detail": "",
            "instance": "/v1/catalogs"
          }

    ServerErrorResponse:
      description:
        A server-side problem that might not be addressable from the client
        side. Used for server 5xx errors without more specific documentation in
        individual routes.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example: {
            "type": "/errors/server-error",
            "title": "Internal Server Error",
            "status": 500,
            "detail": "",
            "instance": "/v1/catalogs"
          }

  examples:
    ListCatalogsEmptyExample:
      summary: An empty list of catalogs
      value: {
        "catalogs": [ ]
      }

    ListCatalogsNonEmptyExample:
      summary: A non-empty list of catalogs
      value: {
        "catalogs": [
          "accounting",
          "credits"
        ]
      }
