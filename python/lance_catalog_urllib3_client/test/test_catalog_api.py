# coding: utf-8

"""
    Lance REST Catalog Specification

    **Lance Catalog** is an open specification on top of the storage-based Lance open table and data format  to standardize access to a collection of Lance tables. It describes how a catalog service like Apache Hive MetaStore (HMS), Apache Gravitino, Unity Catalog, etc. should store and use Lance tables, as well as how ML/AI tools and analytics compute engines (will together be called _\"tools\"_ in this document) should integrate with Lance. A Lance catalog is a centralized repository for discovering, organizing, and managing Lance tables. It is a generalized concept that is also called namespace, metastore, database, schema in other similar systems. A Lance catalog can either contain a list of tables, or contain a list of Lance catalogs recursively. In an enterprise environment, typically there is a requirement to store tables in a catalog service  such as Apache Hive MetaStore, Apache Gravitino, Unity Catalog, etc.  for more advanced governance features around access control, auditing, lineage tracking, etc. **Lance REST catalog** is a standardized OpenAPI protocol to read, write and manage Lance tables. 

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from lance_catalog_urllib3_client.api.catalog_api import CatalogApi


class TestCatalogApi(unittest.TestCase):
    """CatalogApi unit test stubs"""

    def setUp(self) -> None:
        self.api = CatalogApi()

    def tearDown(self) -> None:
        pass

    def test_catalog_exists(self) -> None:
        """Test case for catalog_exists

        Check if a catalog exists
        """
        pass

    def test_create_catalog(self) -> None:
        """Test case for create_catalog

        Create a new catalog. A catalog can manage either a collection of child catalogs, or a collection of tables. There are three modes when trying to create a catalog to differentiate the behavior when a catalog of the same name already exists:   * CREATE: the operation fails with 400.   * EXIST_OK: the operation succeeds and the existing catalog is kept.   * OVERWRITE: the existing catalog is dropped and a new empty catalog with this name is created. 
        """
        pass

    def test_drop_catalog(self) -> None:
        """Test case for drop_catalog

        Drop a catalog. The catalog must be empty.
        """
        pass

    def test_get_catalog(self) -> None:
        """Test case for get_catalog

        Get information about a catalog
        """
        pass

    def test_list_catalogs(self) -> None:
        """Test case for list_catalogs

        List all direct child catalogs of the root catalog. 
        """
        pass


if __name__ == '__main__':
    unittest.main()
