# coding: utf-8

"""
    Lance Catalog REST Specification

    **Lance Catalog** is an OpenAPI specification on top of the storage-based Lance format. It provides an integration point for catalog service like Apache Hive MetaStore (HMS), Apache Gravitino, etc. to store and use Lance tables. To integrate, the catalog service implements a **Lance Catalog Adapter**, which is a REST server that converts the Lance catalog requests to native requests against the catalog service. Different tools can integrate with Lance Catalog using the generated OpenAPI clients in various languages, and invoke operations in Lance Catalog to read, write and manage Lance tables in the integrated catalog services. 

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from lance_catalog_urllib3_client.api.namespace_api import NamespaceApi


class TestNamespaceApi(unittest.TestCase):
    """NamespaceApi unit test stubs"""

    def setUp(self) -> None:
        self.api = NamespaceApi()

    def tearDown(self) -> None:
        pass

    def test_create_namespace(self) -> None:
        """Test case for create_namespace

        Create a new namespace. A catalog can manage one or more namespaces. A namespace is used to manage one or more tables. There are three modes when trying to create a namespace:   * CREATE: Create the namespace if it does not exist. If a namespace of the same name already exists, the operation fails with 400.   * EXIST_OK: Create the namespace if it does not exist. If a namespace of the same name already exists, the operation succeeds and the existing namespace is kept.   * OVERWRITE: Create the namespace if it does not exist. If a namespace of the same name already exists, the existing namespace is dropped and a new namespace with this name with no table is created. 
        """
        pass

    def test_drop_namespace(self) -> None:
        """Test case for drop_namespace

        Drop a namespace from the catalog. Namespace must be empty.
        """
        pass

    def test_get_namespace(self) -> None:
        """Test case for get_namespace

        Get information about a namespace
        """
        pass

    def test_list_namespaces(self) -> None:
        """Test case for list_namespaces

        List all namespaces in the catalog. 
        """
        pass

    def test_namespace_exists(self) -> None:
        """Test case for namespace_exists

        Check if a namespace exists
        """
        pass


if __name__ == '__main__':
    unittest.main()
