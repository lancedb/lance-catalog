# coding: utf-8

"""
    Lance Catalog REST Specification

    **Lance Catalog** is an OpenAPI specification on top of the storage-based Lance format. It provides an integration point for catalog service like Apache Hive MetaStore (HMS), Apache Gravitino, etc. to store and use Lance tables. To integrate, the catalog service implements a **Lance Catalog Adapter**, which is a REST server that converts the Lance catalog requests to native requests against the catalog service. Different tools can integrate with Lance Catalog using the generated OpenAPI clients in various languages, and invoke operations in Lance Catalog to read, write and manage Lance tables in the integrated catalog services. 

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from lance_catalog_urllib3_client.models.alter_transaction_set_property import AlterTransactionSetProperty
from lance_catalog_urllib3_client.models.alter_transaction_set_status import AlterTransactionSetStatus
from lance_catalog_urllib3_client.models.alter_transaction_unset_property import AlterTransactionUnsetProperty
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

ALTERTRANSACTIONACTION_ONE_OF_SCHEMAS = ["AlterTransactionSetProperty", "AlterTransactionSetStatus", "AlterTransactionUnsetProperty"]

class AlterTransactionAction(BaseModel):
    """
    AlterTransactionAction
    """
    # data type: AlterTransactionSetStatus
    oneof_schema_1_validator: Optional[AlterTransactionSetStatus] = None
    # data type: AlterTransactionSetProperty
    oneof_schema_2_validator: Optional[AlterTransactionSetProperty] = None
    # data type: AlterTransactionUnsetProperty
    oneof_schema_3_validator: Optional[AlterTransactionUnsetProperty] = None
    actual_instance: Optional[Union[AlterTransactionSetProperty, AlterTransactionSetStatus, AlterTransactionUnsetProperty]] = None
    one_of_schemas: Set[str] = { "AlterTransactionSetProperty", "AlterTransactionSetStatus", "AlterTransactionUnsetProperty" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = AlterTransactionAction.model_construct()
        error_messages = []
        match = 0
        # validate data type: AlterTransactionSetStatus
        if not isinstance(v, AlterTransactionSetStatus):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AlterTransactionSetStatus`")
        else:
            match += 1
        # validate data type: AlterTransactionSetProperty
        if not isinstance(v, AlterTransactionSetProperty):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AlterTransactionSetProperty`")
        else:
            match += 1
        # validate data type: AlterTransactionUnsetProperty
        if not isinstance(v, AlterTransactionUnsetProperty):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AlterTransactionUnsetProperty`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in AlterTransactionAction with oneOf schemas: AlterTransactionSetProperty, AlterTransactionSetStatus, AlterTransactionUnsetProperty. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in AlterTransactionAction with oneOf schemas: AlterTransactionSetProperty, AlterTransactionSetStatus, AlterTransactionUnsetProperty. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into AlterTransactionSetStatus
        try:
            instance.actual_instance = AlterTransactionSetStatus.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AlterTransactionSetProperty
        try:
            instance.actual_instance = AlterTransactionSetProperty.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AlterTransactionUnsetProperty
        try:
            instance.actual_instance = AlterTransactionUnsetProperty.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into AlterTransactionAction with oneOf schemas: AlterTransactionSetProperty, AlterTransactionSetStatus, AlterTransactionUnsetProperty. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into AlterTransactionAction with oneOf schemas: AlterTransactionSetProperty, AlterTransactionSetStatus, AlterTransactionUnsetProperty. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AlterTransactionSetProperty, AlterTransactionSetStatus, AlterTransactionUnsetProperty]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


